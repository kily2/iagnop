#!/usr/bin/env ruby

require 'gosu'


#AI Test
class Pong < Gosu::Window
	def initialize(logic)
		super 200, 300
		self.caption = "Pong AI Training"

		@logic = logic
	
		@paddle_width =30
		@paddle_height=5
		
		@user1_points = 0
		@user2_points = 0

		@user1_x = width/2-15
		@user1_y = height-10
		
		@user1_left = false
		@user1_right = false

		@user2_x = width/2-15
		@user2_y = 5

		@user2_left = false
		@user2_right = false

		@radius = 6	
		@ball_x = width/2-3
		@ball_y = height/2-3
		@surface_x = nil
		@surface_y = nil
		@angle = 70
		@intensity = 2
		@scale = 0.5	
	end

	def update
		case @logic
		when :two
			move	
		when :single

		when :ai

		else
			raise "Undefined logic: #{@logic}"
		end  
	end

	def draw
		Gosu.draw_rect(@user1_x,@user1_y,30,5,Gosu::Color::WHITE)
		Gosu.draw_rect(@user2_x,@user2_y,30,5,Gosu::Color::RED) 
		draw_ball(@ball_x,@ball_y)
	end

	def draw_ball(x,y)
		color = Gosu::Color::GREEN
		radius = 6
		steps = 30
		step_angle = (2 * Math::PI) / steps

		center_x = x
		center_y = y

		steps.times do |i|
		  	angle1 = i * step_angle
		  	angle2 = (i + 1) * step_angle

		 	x1 = x + radius * Math.cos(angle1)
		 	y1 = y + radius * Math.sin(angle1)
			x2 = x + radius * Math.cos(angle2)
			y2 = y + radius * Math.sin(angle2)
		
			draw_triangle(center_x, center_y, color, x1, y1, color, x2, y2, color)
		end
	end

	def move_player(user_left, user_right, user_x)
		if user_left && !user_right
			user_x -= 2 unless user_x <= 0
		elsif !user_left && user_right
			user_x += 2 unless user_x >= width - @paddle_width
		end
		user_x
	end

	def move
		@user1_x = move_player(@user1_left, @user1_right, @user1_x)
		@user2_x = move_player(@user2_left, @user2_right, @user2_x)

		@ball_x += Math.cos(Math::PI / 180 * @angle)*@intensity
		@ball_y += Math.sin(Math::PI / 180 * @angle)*@intensity

		@intensity = (1.0 - @scale)*3.0	
		
		if @ball_x - @radius < 0 || @ball_x + @radius > width
			@angle = 180 - @angle
		end


		if hit_paddle(:user1)
			reflect(:user1)
		elsif hit_paddle(:user2)
			reflect(:user2)
		end	

		
		if @ball_y - @radius < 0
			@user1_points += 1
			puts "User1: #{@user1_points}"
			restart
		elsif @ball_y + @radius > height
			@user2_points += 1
			puts "User2: #{@user2_points}"
			restart
		end
	end


	def	reflect(user)
		case user
		when :user1
			@scale = (@ball_x-@user1_x).abs / (@paddle_width / 2)
		when :user2
			@scale = (@ball_x-@user2_x).abs / (@paddle_width / 2)
		end
		@angle = 180+(@angle*@scale)

		puts "#{@scale} : scale"
		puts "#{@angle} : angle"
	end

	def hit_paddle(user)	
		@surface_x = @ball_x + @radius * Math.cos(Math::PI / 180*@angle)
		@surface_y = @ball_y + @radius * Math.sin(Math::PI / 180*@angle)
		case user
		when :user1
			return @surface_x >= @user1_x && @surface_x < @user1_x+@paddle_width && @surface_y >= @user1_y
		when :user2
			return @surface_x >= @user2_x && @surface_x < @user2_x+@paddle_width && @surface_y <= @user2_y+@paddle_height
		end
	end


	def restart
		@ball_x = width/2-3
		@ball_y = height/2-3
		@angle = 70
	end

	def button_down(event)
		case event
		when Gosu::KB_LEFT	
			@user1_left = true
		when Gosu::KB_RIGHT
			@user1_right = true	
		when Gosu::KB_A
			@user2_left = true
		when Gosu::KB_S
			@user2_right = true
		end
	end

	def button_up(event)
		case event
		when Gosu::KB_LEFT
			@user1_left = false
		when Gosu::KB_RIGHT
			@user1_right = false
		when Gosu::KB_A
			@user2_left = false
		when Gosu::KB_S
			@user2_right = false
		end
	end

end





w = Pong.new(:two)
w.show






####


